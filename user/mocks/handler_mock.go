// Code generated by MockGen. DO NOT EDIT.
// Source: ./user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	e "github.com/cyicz123/todolist/user/pkg/e"
	repo "github.com/cyicz123/todolist/user/pkg/repo"
	gomock "github.com/golang/mock/gomock"
)

// MockUserInterface is a mock of UserInterface interface.
type MockUserInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserInterfaceMockRecorder
}

// MockUserInterfaceMockRecorder is the mock recorder for MockUserInterface.
type MockUserInterfaceMockRecorder struct {
	mock *MockUserInterface
}

// NewMockUserInterface creates a new mock instance.
func NewMockUserInterface(ctrl *gomock.Controller) *MockUserInterface {
	mock := &MockUserInterface{ctrl: ctrl}
	mock.recorder = &MockUserInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInterface) EXPECT() *MockUserInterfaceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserInterface) Login(info *repo.User) e.ErrInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", info)
	ret0, _ := ret[0].(e.ErrInterface)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockUserInterfaceMockRecorder) Login(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserInterface)(nil).Login), info)
}

// Register mocks base method.
func (m *MockUserInterface) Register(info *repo.User) e.ErrInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", info)
	ret0, _ := ret[0].(e.ErrInterface)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserInterfaceMockRecorder) Register(info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserInterface)(nil).Register), info)
}

// UserDelete mocks base method.
func (m *MockUserInterface) UserDelete(name string) e.ErrInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDelete", name)
	ret0, _ := ret[0].(e.ErrInterface)
	return ret0
}

// UserDelete indicates an expected call of UserDelete.
func (mr *MockUserInterfaceMockRecorder) UserDelete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDelete", reflect.TypeOf((*MockUserInterface)(nil).UserDelete), name)
}
